Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RETURN
    RBRACE
    SEMICOLON
    FUNCTION
    EQUAL
    VAR
    ELSE
    IF
    LBRACE

Grammar

Rule 0     S' -> exp
Rule 1     exp -> IDENTIFIER
Rule 2     exp -> NUMBER
Rule 3     exp -> STRING
Rule 4     exp -> TRUE
Rule 5     exp -> FALSE
Rule 6     exp -> NOT exp
Rule 7     exp -> LPAREN exp RPAREN
Rule 8     args -> exp COMMA args
Rule 9     args -> exp
Rule 10    exp -> IDENTIFIER LPAREN optargs RPAREN
Rule 11    optargs -> args
Rule 12    optargs -> <empty>
Rule 13    exp -> exp PLUS exp
Rule 14    exp -> exp MINUS exp
Rule 15    exp -> exp TIMES exp
Rule 16    exp -> exp MOD exp
Rule 17    exp -> exp DIVIDE exp
Rule 18    exp -> exp EQUALEQUAL exp
Rule 19    exp -> exp LE exp
Rule 20    exp -> exp LT exp
Rule 21    exp -> exp GE exp
Rule 22    exp -> exp GT exp
Rule 23    exp -> exp ANDAND exp
Rule 24    exp -> exp OROR exp

Terminals, with rules where they appear

ANDAND               : 23
COMMA                : 8
DIVIDE               : 17
ELSE                 : 
EQUAL                : 
EQUALEQUAL           : 18
FALSE                : 5
FUNCTION             : 
GE                   : 21
GT                   : 22
IDENTIFIER           : 1 10
IF                   : 
LBRACE               : 
LE                   : 19
LPAREN               : 7 10
LT                   : 20
MINUS                : 14
MOD                  : 16
NOT                  : 6
NUMBER               : 2
OROR                 : 24
PLUS                 : 13
RBRACE               : 
RETURN               : 
RPAREN               : 7 10
SEMICOLON            : 
STRING               : 3
TIMES                : 15
TRUE                 : 4
VAR                  : 
error                : 

Nonterminals, with rules where they appear

args                 : 8 11
exp                  : 6 7 8 9 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 0
optargs              : 10

Parsing method: LALR

state 0

    (0) S' -> . exp
    (1) exp -> . IDENTIFIER
    (2) exp -> . NUMBER
    (3) exp -> . STRING
    (4) exp -> . TRUE
    (5) exp -> . FALSE
    (6) exp -> . NOT exp
    (7) exp -> . LPAREN exp RPAREN
    (10) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp TIMES exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp EQUALEQUAL exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp LT exp
    (21) exp -> . exp GE exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp ANDAND exp
    (24) exp -> . exp OROR exp

    IDENTIFIER      shift and go to state 4
    NUMBER          shift and go to state 1
    STRING          shift and go to state 3
    TRUE            shift and go to state 2
    FALSE           shift and go to state 6
    NOT             shift and go to state 8
    LPAREN          shift and go to state 5

    exp                            shift and go to state 7

state 1

    (2) exp -> NUMBER .

    PLUS            reduce using rule 2 (exp -> NUMBER .)
    MINUS           reduce using rule 2 (exp -> NUMBER .)
    TIMES           reduce using rule 2 (exp -> NUMBER .)
    MOD             reduce using rule 2 (exp -> NUMBER .)
    DIVIDE          reduce using rule 2 (exp -> NUMBER .)
    EQUALEQUAL      reduce using rule 2 (exp -> NUMBER .)
    LE              reduce using rule 2 (exp -> NUMBER .)
    LT              reduce using rule 2 (exp -> NUMBER .)
    GE              reduce using rule 2 (exp -> NUMBER .)
    GT              reduce using rule 2 (exp -> NUMBER .)
    ANDAND          reduce using rule 2 (exp -> NUMBER .)
    OROR            reduce using rule 2 (exp -> NUMBER .)
    $end            reduce using rule 2 (exp -> NUMBER .)
    RPAREN          reduce using rule 2 (exp -> NUMBER .)
    COMMA           reduce using rule 2 (exp -> NUMBER .)


state 2

    (4) exp -> TRUE .

    PLUS            reduce using rule 4 (exp -> TRUE .)
    MINUS           reduce using rule 4 (exp -> TRUE .)
    TIMES           reduce using rule 4 (exp -> TRUE .)
    MOD             reduce using rule 4 (exp -> TRUE .)
    DIVIDE          reduce using rule 4 (exp -> TRUE .)
    EQUALEQUAL      reduce using rule 4 (exp -> TRUE .)
    LE              reduce using rule 4 (exp -> TRUE .)
    LT              reduce using rule 4 (exp -> TRUE .)
    GE              reduce using rule 4 (exp -> TRUE .)
    GT              reduce using rule 4 (exp -> TRUE .)
    ANDAND          reduce using rule 4 (exp -> TRUE .)
    OROR            reduce using rule 4 (exp -> TRUE .)
    $end            reduce using rule 4 (exp -> TRUE .)
    RPAREN          reduce using rule 4 (exp -> TRUE .)
    COMMA           reduce using rule 4 (exp -> TRUE .)


state 3

    (3) exp -> STRING .

    PLUS            reduce using rule 3 (exp -> STRING .)
    MINUS           reduce using rule 3 (exp -> STRING .)
    TIMES           reduce using rule 3 (exp -> STRING .)
    MOD             reduce using rule 3 (exp -> STRING .)
    DIVIDE          reduce using rule 3 (exp -> STRING .)
    EQUALEQUAL      reduce using rule 3 (exp -> STRING .)
    LE              reduce using rule 3 (exp -> STRING .)
    LT              reduce using rule 3 (exp -> STRING .)
    GE              reduce using rule 3 (exp -> STRING .)
    GT              reduce using rule 3 (exp -> STRING .)
    ANDAND          reduce using rule 3 (exp -> STRING .)
    OROR            reduce using rule 3 (exp -> STRING .)
    $end            reduce using rule 3 (exp -> STRING .)
    RPAREN          reduce using rule 3 (exp -> STRING .)
    COMMA           reduce using rule 3 (exp -> STRING .)


state 4

    (1) exp -> IDENTIFIER .
    (10) exp -> IDENTIFIER . LPAREN optargs RPAREN

    PLUS            reduce using rule 1 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 1 (exp -> IDENTIFIER .)
    TIMES           reduce using rule 1 (exp -> IDENTIFIER .)
    MOD             reduce using rule 1 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 1 (exp -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 1 (exp -> IDENTIFIER .)
    LE              reduce using rule 1 (exp -> IDENTIFIER .)
    LT              reduce using rule 1 (exp -> IDENTIFIER .)
    GE              reduce using rule 1 (exp -> IDENTIFIER .)
    GT              reduce using rule 1 (exp -> IDENTIFIER .)
    ANDAND          reduce using rule 1 (exp -> IDENTIFIER .)
    OROR            reduce using rule 1 (exp -> IDENTIFIER .)
    $end            reduce using rule 1 (exp -> IDENTIFIER .)
    RPAREN          reduce using rule 1 (exp -> IDENTIFIER .)
    COMMA           reduce using rule 1 (exp -> IDENTIFIER .)
    LPAREN          shift and go to state 9


state 5

    (7) exp -> LPAREN . exp RPAREN
    (1) exp -> . IDENTIFIER
    (2) exp -> . NUMBER
    (3) exp -> . STRING
    (4) exp -> . TRUE
    (5) exp -> . FALSE
    (6) exp -> . NOT exp
    (7) exp -> . LPAREN exp RPAREN
    (10) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp TIMES exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp EQUALEQUAL exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp LT exp
    (21) exp -> . exp GE exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp ANDAND exp
    (24) exp -> . exp OROR exp

    IDENTIFIER      shift and go to state 4
    NUMBER          shift and go to state 1
    STRING          shift and go to state 3
    TRUE            shift and go to state 2
    FALSE           shift and go to state 6
    NOT             shift and go to state 8
    LPAREN          shift and go to state 5

    exp                            shift and go to state 10

state 6

    (5) exp -> FALSE .

    PLUS            reduce using rule 5 (exp -> FALSE .)
    MINUS           reduce using rule 5 (exp -> FALSE .)
    TIMES           reduce using rule 5 (exp -> FALSE .)
    MOD             reduce using rule 5 (exp -> FALSE .)
    DIVIDE          reduce using rule 5 (exp -> FALSE .)
    EQUALEQUAL      reduce using rule 5 (exp -> FALSE .)
    LE              reduce using rule 5 (exp -> FALSE .)
    LT              reduce using rule 5 (exp -> FALSE .)
    GE              reduce using rule 5 (exp -> FALSE .)
    GT              reduce using rule 5 (exp -> FALSE .)
    ANDAND          reduce using rule 5 (exp -> FALSE .)
    OROR            reduce using rule 5 (exp -> FALSE .)
    $end            reduce using rule 5 (exp -> FALSE .)
    RPAREN          reduce using rule 5 (exp -> FALSE .)
    COMMA           reduce using rule 5 (exp -> FALSE .)


state 7

    (0) S' -> exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . TIMES exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . EQUALEQUAL exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . LT exp
    (21) exp -> exp . GE exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . ANDAND exp
    (24) exp -> exp . OROR exp

    PLUS            shift and go to state 19
    MINUS           shift and go to state 21
    TIMES           shift and go to state 16
    MOD             shift and go to state 22
    DIVIDE          shift and go to state 14
    EQUALEQUAL      shift and go to state 20
    LE              shift and go to state 13
    LT              shift and go to state 17
    GE              shift and go to state 15
    GT              shift and go to state 18
    ANDAND          shift and go to state 11
    OROR            shift and go to state 12


state 8

    (6) exp -> NOT . exp
    (1) exp -> . IDENTIFIER
    (2) exp -> . NUMBER
    (3) exp -> . STRING
    (4) exp -> . TRUE
    (5) exp -> . FALSE
    (6) exp -> . NOT exp
    (7) exp -> . LPAREN exp RPAREN
    (10) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp TIMES exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp EQUALEQUAL exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp LT exp
    (21) exp -> . exp GE exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp ANDAND exp
    (24) exp -> . exp OROR exp

    IDENTIFIER      shift and go to state 4
    NUMBER          shift and go to state 1
    STRING          shift and go to state 3
    TRUE            shift and go to state 2
    FALSE           shift and go to state 6
    NOT             shift and go to state 8
    LPAREN          shift and go to state 5

    exp                            shift and go to state 23

state 9

    (10) exp -> IDENTIFIER LPAREN . optargs RPAREN
    (11) optargs -> . args
    (12) optargs -> .
    (8) args -> . exp COMMA args
    (9) args -> . exp
    (1) exp -> . IDENTIFIER
    (2) exp -> . NUMBER
    (3) exp -> . STRING
    (4) exp -> . TRUE
    (5) exp -> . FALSE
    (6) exp -> . NOT exp
    (7) exp -> . LPAREN exp RPAREN
    (10) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp TIMES exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp EQUALEQUAL exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp LT exp
    (21) exp -> . exp GE exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp ANDAND exp
    (24) exp -> . exp OROR exp

    RPAREN          reduce using rule 12 (optargs -> .)
    IDENTIFIER      shift and go to state 4
    NUMBER          shift and go to state 1
    STRING          shift and go to state 3
    TRUE            shift and go to state 2
    FALSE           shift and go to state 6
    NOT             shift and go to state 8
    LPAREN          shift and go to state 5

    args                           shift and go to state 24
    exp                            shift and go to state 26
    optargs                        shift and go to state 25

state 10

    (7) exp -> LPAREN exp . RPAREN
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . TIMES exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . EQUALEQUAL exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . LT exp
    (21) exp -> exp . GE exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . ANDAND exp
    (24) exp -> exp . OROR exp

    RPAREN          shift and go to state 27
    PLUS            shift and go to state 19
    MINUS           shift and go to state 21
    TIMES           shift and go to state 16
    MOD             shift and go to state 22
    DIVIDE          shift and go to state 14
    EQUALEQUAL      shift and go to state 20
    LE              shift and go to state 13
    LT              shift and go to state 17
    GE              shift and go to state 15
    GT              shift and go to state 18
    ANDAND          shift and go to state 11
    OROR            shift and go to state 12


state 11

    (23) exp -> exp ANDAND . exp
    (1) exp -> . IDENTIFIER
    (2) exp -> . NUMBER
    (3) exp -> . STRING
    (4) exp -> . TRUE
    (5) exp -> . FALSE
    (6) exp -> . NOT exp
    (7) exp -> . LPAREN exp RPAREN
    (10) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp TIMES exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp EQUALEQUAL exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp LT exp
    (21) exp -> . exp GE exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp ANDAND exp
    (24) exp -> . exp OROR exp

    IDENTIFIER      shift and go to state 4
    NUMBER          shift and go to state 1
    STRING          shift and go to state 3
    TRUE            shift and go to state 2
    FALSE           shift and go to state 6
    NOT             shift and go to state 8
    LPAREN          shift and go to state 5

    exp                            shift and go to state 28

state 12

    (24) exp -> exp OROR . exp
    (1) exp -> . IDENTIFIER
    (2) exp -> . NUMBER
    (3) exp -> . STRING
    (4) exp -> . TRUE
    (5) exp -> . FALSE
    (6) exp -> . NOT exp
    (7) exp -> . LPAREN exp RPAREN
    (10) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp TIMES exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp EQUALEQUAL exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp LT exp
    (21) exp -> . exp GE exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp ANDAND exp
    (24) exp -> . exp OROR exp

    IDENTIFIER      shift and go to state 4
    NUMBER          shift and go to state 1
    STRING          shift and go to state 3
    TRUE            shift and go to state 2
    FALSE           shift and go to state 6
    NOT             shift and go to state 8
    LPAREN          shift and go to state 5

    exp                            shift and go to state 29

state 13

    (19) exp -> exp LE . exp
    (1) exp -> . IDENTIFIER
    (2) exp -> . NUMBER
    (3) exp -> . STRING
    (4) exp -> . TRUE
    (5) exp -> . FALSE
    (6) exp -> . NOT exp
    (7) exp -> . LPAREN exp RPAREN
    (10) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp TIMES exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp EQUALEQUAL exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp LT exp
    (21) exp -> . exp GE exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp ANDAND exp
    (24) exp -> . exp OROR exp

    IDENTIFIER      shift and go to state 4
    NUMBER          shift and go to state 1
    STRING          shift and go to state 3
    TRUE            shift and go to state 2
    FALSE           shift and go to state 6
    NOT             shift and go to state 8
    LPAREN          shift and go to state 5

    exp                            shift and go to state 30

state 14

    (17) exp -> exp DIVIDE . exp
    (1) exp -> . IDENTIFIER
    (2) exp -> . NUMBER
    (3) exp -> . STRING
    (4) exp -> . TRUE
    (5) exp -> . FALSE
    (6) exp -> . NOT exp
    (7) exp -> . LPAREN exp RPAREN
    (10) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp TIMES exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp EQUALEQUAL exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp LT exp
    (21) exp -> . exp GE exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp ANDAND exp
    (24) exp -> . exp OROR exp

    IDENTIFIER      shift and go to state 4
    NUMBER          shift and go to state 1
    STRING          shift and go to state 3
    TRUE            shift and go to state 2
    FALSE           shift and go to state 6
    NOT             shift and go to state 8
    LPAREN          shift and go to state 5

    exp                            shift and go to state 31

state 15

    (21) exp -> exp GE . exp
    (1) exp -> . IDENTIFIER
    (2) exp -> . NUMBER
    (3) exp -> . STRING
    (4) exp -> . TRUE
    (5) exp -> . FALSE
    (6) exp -> . NOT exp
    (7) exp -> . LPAREN exp RPAREN
    (10) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp TIMES exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp EQUALEQUAL exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp LT exp
    (21) exp -> . exp GE exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp ANDAND exp
    (24) exp -> . exp OROR exp

    IDENTIFIER      shift and go to state 4
    NUMBER          shift and go to state 1
    STRING          shift and go to state 3
    TRUE            shift and go to state 2
    FALSE           shift and go to state 6
    NOT             shift and go to state 8
    LPAREN          shift and go to state 5

    exp                            shift and go to state 32

state 16

    (15) exp -> exp TIMES . exp
    (1) exp -> . IDENTIFIER
    (2) exp -> . NUMBER
    (3) exp -> . STRING
    (4) exp -> . TRUE
    (5) exp -> . FALSE
    (6) exp -> . NOT exp
    (7) exp -> . LPAREN exp RPAREN
    (10) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp TIMES exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp EQUALEQUAL exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp LT exp
    (21) exp -> . exp GE exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp ANDAND exp
    (24) exp -> . exp OROR exp

    IDENTIFIER      shift and go to state 4
    NUMBER          shift and go to state 1
    STRING          shift and go to state 3
    TRUE            shift and go to state 2
    FALSE           shift and go to state 6
    NOT             shift and go to state 8
    LPAREN          shift and go to state 5

    exp                            shift and go to state 33

state 17

    (20) exp -> exp LT . exp
    (1) exp -> . IDENTIFIER
    (2) exp -> . NUMBER
    (3) exp -> . STRING
    (4) exp -> . TRUE
    (5) exp -> . FALSE
    (6) exp -> . NOT exp
    (7) exp -> . LPAREN exp RPAREN
    (10) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp TIMES exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp EQUALEQUAL exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp LT exp
    (21) exp -> . exp GE exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp ANDAND exp
    (24) exp -> . exp OROR exp

    IDENTIFIER      shift and go to state 4
    NUMBER          shift and go to state 1
    STRING          shift and go to state 3
    TRUE            shift and go to state 2
    FALSE           shift and go to state 6
    NOT             shift and go to state 8
    LPAREN          shift and go to state 5

    exp                            shift and go to state 34

state 18

    (22) exp -> exp GT . exp
    (1) exp -> . IDENTIFIER
    (2) exp -> . NUMBER
    (3) exp -> . STRING
    (4) exp -> . TRUE
    (5) exp -> . FALSE
    (6) exp -> . NOT exp
    (7) exp -> . LPAREN exp RPAREN
    (10) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp TIMES exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp EQUALEQUAL exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp LT exp
    (21) exp -> . exp GE exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp ANDAND exp
    (24) exp -> . exp OROR exp

    IDENTIFIER      shift and go to state 4
    NUMBER          shift and go to state 1
    STRING          shift and go to state 3
    TRUE            shift and go to state 2
    FALSE           shift and go to state 6
    NOT             shift and go to state 8
    LPAREN          shift and go to state 5

    exp                            shift and go to state 35

state 19

    (13) exp -> exp PLUS . exp
    (1) exp -> . IDENTIFIER
    (2) exp -> . NUMBER
    (3) exp -> . STRING
    (4) exp -> . TRUE
    (5) exp -> . FALSE
    (6) exp -> . NOT exp
    (7) exp -> . LPAREN exp RPAREN
    (10) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp TIMES exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp EQUALEQUAL exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp LT exp
    (21) exp -> . exp GE exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp ANDAND exp
    (24) exp -> . exp OROR exp

    IDENTIFIER      shift and go to state 4
    NUMBER          shift and go to state 1
    STRING          shift and go to state 3
    TRUE            shift and go to state 2
    FALSE           shift and go to state 6
    NOT             shift and go to state 8
    LPAREN          shift and go to state 5

    exp                            shift and go to state 36

state 20

    (18) exp -> exp EQUALEQUAL . exp
    (1) exp -> . IDENTIFIER
    (2) exp -> . NUMBER
    (3) exp -> . STRING
    (4) exp -> . TRUE
    (5) exp -> . FALSE
    (6) exp -> . NOT exp
    (7) exp -> . LPAREN exp RPAREN
    (10) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp TIMES exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp EQUALEQUAL exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp LT exp
    (21) exp -> . exp GE exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp ANDAND exp
    (24) exp -> . exp OROR exp

    IDENTIFIER      shift and go to state 4
    NUMBER          shift and go to state 1
    STRING          shift and go to state 3
    TRUE            shift and go to state 2
    FALSE           shift and go to state 6
    NOT             shift and go to state 8
    LPAREN          shift and go to state 5

    exp                            shift and go to state 37

state 21

    (14) exp -> exp MINUS . exp
    (1) exp -> . IDENTIFIER
    (2) exp -> . NUMBER
    (3) exp -> . STRING
    (4) exp -> . TRUE
    (5) exp -> . FALSE
    (6) exp -> . NOT exp
    (7) exp -> . LPAREN exp RPAREN
    (10) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp TIMES exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp EQUALEQUAL exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp LT exp
    (21) exp -> . exp GE exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp ANDAND exp
    (24) exp -> . exp OROR exp

    IDENTIFIER      shift and go to state 4
    NUMBER          shift and go to state 1
    STRING          shift and go to state 3
    TRUE            shift and go to state 2
    FALSE           shift and go to state 6
    NOT             shift and go to state 8
    LPAREN          shift and go to state 5

    exp                            shift and go to state 38

state 22

    (16) exp -> exp MOD . exp
    (1) exp -> . IDENTIFIER
    (2) exp -> . NUMBER
    (3) exp -> . STRING
    (4) exp -> . TRUE
    (5) exp -> . FALSE
    (6) exp -> . NOT exp
    (7) exp -> . LPAREN exp RPAREN
    (10) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp TIMES exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp EQUALEQUAL exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp LT exp
    (21) exp -> . exp GE exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp ANDAND exp
    (24) exp -> . exp OROR exp

    IDENTIFIER      shift and go to state 4
    NUMBER          shift and go to state 1
    STRING          shift and go to state 3
    TRUE            shift and go to state 2
    FALSE           shift and go to state 6
    NOT             shift and go to state 8
    LPAREN          shift and go to state 5

    exp                            shift and go to state 39

state 23

    (6) exp -> NOT exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . TIMES exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . EQUALEQUAL exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . LT exp
    (21) exp -> exp . GE exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . ANDAND exp
    (24) exp -> exp . OROR exp

    PLUS            reduce using rule 6 (exp -> NOT exp .)
    MINUS           reduce using rule 6 (exp -> NOT exp .)
    TIMES           reduce using rule 6 (exp -> NOT exp .)
    MOD             reduce using rule 6 (exp -> NOT exp .)
    DIVIDE          reduce using rule 6 (exp -> NOT exp .)
    EQUALEQUAL      reduce using rule 6 (exp -> NOT exp .)
    LE              reduce using rule 6 (exp -> NOT exp .)
    LT              reduce using rule 6 (exp -> NOT exp .)
    GE              reduce using rule 6 (exp -> NOT exp .)
    GT              reduce using rule 6 (exp -> NOT exp .)
    ANDAND          reduce using rule 6 (exp -> NOT exp .)
    OROR            reduce using rule 6 (exp -> NOT exp .)
    $end            reduce using rule 6 (exp -> NOT exp .)
    RPAREN          reduce using rule 6 (exp -> NOT exp .)
    COMMA           reduce using rule 6 (exp -> NOT exp .)

  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 21 ]
  ! TIMES           [ shift and go to state 16 ]
  ! MOD             [ shift and go to state 22 ]
  ! DIVIDE          [ shift and go to state 14 ]
  ! EQUALEQUAL      [ shift and go to state 20 ]
  ! LE              [ shift and go to state 13 ]
  ! LT              [ shift and go to state 17 ]
  ! GE              [ shift and go to state 15 ]
  ! GT              [ shift and go to state 18 ]
  ! ANDAND          [ shift and go to state 11 ]
  ! OROR            [ shift and go to state 12 ]


state 24

    (11) optargs -> args .

    RPAREN          reduce using rule 11 (optargs -> args .)


state 25

    (10) exp -> IDENTIFIER LPAREN optargs . RPAREN

    RPAREN          shift and go to state 40


state 26

    (8) args -> exp . COMMA args
    (9) args -> exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . TIMES exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . EQUALEQUAL exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . LT exp
    (21) exp -> exp . GE exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . ANDAND exp
    (24) exp -> exp . OROR exp

    COMMA           shift and go to state 41
    RPAREN          reduce using rule 9 (args -> exp .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 21
    TIMES           shift and go to state 16
    MOD             shift and go to state 22
    DIVIDE          shift and go to state 14
    EQUALEQUAL      shift and go to state 20
    LE              shift and go to state 13
    LT              shift and go to state 17
    GE              shift and go to state 15
    GT              shift and go to state 18
    ANDAND          shift and go to state 11
    OROR            shift and go to state 12


state 27

    (7) exp -> LPAREN exp RPAREN .

    PLUS            reduce using rule 7 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 7 (exp -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 7 (exp -> LPAREN exp RPAREN .)
    MOD             reduce using rule 7 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 7 (exp -> LPAREN exp RPAREN .)
    EQUALEQUAL      reduce using rule 7 (exp -> LPAREN exp RPAREN .)
    LE              reduce using rule 7 (exp -> LPAREN exp RPAREN .)
    LT              reduce using rule 7 (exp -> LPAREN exp RPAREN .)
    GE              reduce using rule 7 (exp -> LPAREN exp RPAREN .)
    GT              reduce using rule 7 (exp -> LPAREN exp RPAREN .)
    ANDAND          reduce using rule 7 (exp -> LPAREN exp RPAREN .)
    OROR            reduce using rule 7 (exp -> LPAREN exp RPAREN .)
    $end            reduce using rule 7 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 7 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 7 (exp -> LPAREN exp RPAREN .)


state 28

    (23) exp -> exp ANDAND exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . TIMES exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . EQUALEQUAL exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . LT exp
    (21) exp -> exp . GE exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . ANDAND exp
    (24) exp -> exp . OROR exp

    ANDAND          reduce using rule 23 (exp -> exp ANDAND exp .)
    OROR            reduce using rule 23 (exp -> exp ANDAND exp .)
    $end            reduce using rule 23 (exp -> exp ANDAND exp .)
    RPAREN          reduce using rule 23 (exp -> exp ANDAND exp .)
    COMMA           reduce using rule 23 (exp -> exp ANDAND exp .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 21
    TIMES           shift and go to state 16
    MOD             shift and go to state 22
    DIVIDE          shift and go to state 14
    EQUALEQUAL      shift and go to state 20
    LE              shift and go to state 13
    LT              shift and go to state 17
    GE              shift and go to state 15
    GT              shift and go to state 18

  ! PLUS            [ reduce using rule 23 (exp -> exp ANDAND exp .) ]
  ! MINUS           [ reduce using rule 23 (exp -> exp ANDAND exp .) ]
  ! TIMES           [ reduce using rule 23 (exp -> exp ANDAND exp .) ]
  ! MOD             [ reduce using rule 23 (exp -> exp ANDAND exp .) ]
  ! DIVIDE          [ reduce using rule 23 (exp -> exp ANDAND exp .) ]
  ! EQUALEQUAL      [ reduce using rule 23 (exp -> exp ANDAND exp .) ]
  ! LE              [ reduce using rule 23 (exp -> exp ANDAND exp .) ]
  ! LT              [ reduce using rule 23 (exp -> exp ANDAND exp .) ]
  ! GE              [ reduce using rule 23 (exp -> exp ANDAND exp .) ]
  ! GT              [ reduce using rule 23 (exp -> exp ANDAND exp .) ]
  ! ANDAND          [ shift and go to state 11 ]
  ! OROR            [ shift and go to state 12 ]


state 29

    (24) exp -> exp OROR exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . TIMES exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . EQUALEQUAL exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . LT exp
    (21) exp -> exp . GE exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . ANDAND exp
    (24) exp -> exp . OROR exp

    OROR            reduce using rule 24 (exp -> exp OROR exp .)
    $end            reduce using rule 24 (exp -> exp OROR exp .)
    RPAREN          reduce using rule 24 (exp -> exp OROR exp .)
    COMMA           reduce using rule 24 (exp -> exp OROR exp .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 21
    TIMES           shift and go to state 16
    MOD             shift and go to state 22
    DIVIDE          shift and go to state 14
    EQUALEQUAL      shift and go to state 20
    LE              shift and go to state 13
    LT              shift and go to state 17
    GE              shift and go to state 15
    GT              shift and go to state 18
    ANDAND          shift and go to state 11

  ! PLUS            [ reduce using rule 24 (exp -> exp OROR exp .) ]
  ! MINUS           [ reduce using rule 24 (exp -> exp OROR exp .) ]
  ! TIMES           [ reduce using rule 24 (exp -> exp OROR exp .) ]
  ! MOD             [ reduce using rule 24 (exp -> exp OROR exp .) ]
  ! DIVIDE          [ reduce using rule 24 (exp -> exp OROR exp .) ]
  ! EQUALEQUAL      [ reduce using rule 24 (exp -> exp OROR exp .) ]
  ! LE              [ reduce using rule 24 (exp -> exp OROR exp .) ]
  ! LT              [ reduce using rule 24 (exp -> exp OROR exp .) ]
  ! GE              [ reduce using rule 24 (exp -> exp OROR exp .) ]
  ! GT              [ reduce using rule 24 (exp -> exp OROR exp .) ]
  ! ANDAND          [ reduce using rule 24 (exp -> exp OROR exp .) ]
  ! OROR            [ shift and go to state 12 ]


state 30

    (19) exp -> exp LE exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . TIMES exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . EQUALEQUAL exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . LT exp
    (21) exp -> exp . GE exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . ANDAND exp
    (24) exp -> exp . OROR exp

    EQUALEQUAL      reduce using rule 19 (exp -> exp LE exp .)
    LE              reduce using rule 19 (exp -> exp LE exp .)
    LT              reduce using rule 19 (exp -> exp LE exp .)
    GE              reduce using rule 19 (exp -> exp LE exp .)
    GT              reduce using rule 19 (exp -> exp LE exp .)
    ANDAND          reduce using rule 19 (exp -> exp LE exp .)
    OROR            reduce using rule 19 (exp -> exp LE exp .)
    $end            reduce using rule 19 (exp -> exp LE exp .)
    RPAREN          reduce using rule 19 (exp -> exp LE exp .)
    COMMA           reduce using rule 19 (exp -> exp LE exp .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 21
    TIMES           shift and go to state 16
    MOD             shift and go to state 22
    DIVIDE          shift and go to state 14

  ! PLUS            [ reduce using rule 19 (exp -> exp LE exp .) ]
  ! MINUS           [ reduce using rule 19 (exp -> exp LE exp .) ]
  ! TIMES           [ reduce using rule 19 (exp -> exp LE exp .) ]
  ! MOD             [ reduce using rule 19 (exp -> exp LE exp .) ]
  ! DIVIDE          [ reduce using rule 19 (exp -> exp LE exp .) ]
  ! EQUALEQUAL      [ shift and go to state 20 ]
  ! LE              [ shift and go to state 13 ]
  ! LT              [ shift and go to state 17 ]
  ! GE              [ shift and go to state 15 ]
  ! GT              [ shift and go to state 18 ]
  ! ANDAND          [ shift and go to state 11 ]
  ! OROR            [ shift and go to state 12 ]


state 31

    (17) exp -> exp DIVIDE exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . TIMES exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . EQUALEQUAL exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . LT exp
    (21) exp -> exp . GE exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . ANDAND exp
    (24) exp -> exp . OROR exp

    PLUS            reduce using rule 17 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 17 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 17 (exp -> exp DIVIDE exp .)
    MOD             reduce using rule 17 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 17 (exp -> exp DIVIDE exp .)
    EQUALEQUAL      reduce using rule 17 (exp -> exp DIVIDE exp .)
    LE              reduce using rule 17 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 17 (exp -> exp DIVIDE exp .)
    GE              reduce using rule 17 (exp -> exp DIVIDE exp .)
    GT              reduce using rule 17 (exp -> exp DIVIDE exp .)
    ANDAND          reduce using rule 17 (exp -> exp DIVIDE exp .)
    OROR            reduce using rule 17 (exp -> exp DIVIDE exp .)
    $end            reduce using rule 17 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 17 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 17 (exp -> exp DIVIDE exp .)

  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 21 ]
  ! TIMES           [ shift and go to state 16 ]
  ! MOD             [ shift and go to state 22 ]
  ! DIVIDE          [ shift and go to state 14 ]
  ! EQUALEQUAL      [ shift and go to state 20 ]
  ! LE              [ shift and go to state 13 ]
  ! LT              [ shift and go to state 17 ]
  ! GE              [ shift and go to state 15 ]
  ! GT              [ shift and go to state 18 ]
  ! ANDAND          [ shift and go to state 11 ]
  ! OROR            [ shift and go to state 12 ]


state 32

    (21) exp -> exp GE exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . TIMES exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . EQUALEQUAL exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . LT exp
    (21) exp -> exp . GE exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . ANDAND exp
    (24) exp -> exp . OROR exp

    EQUALEQUAL      reduce using rule 21 (exp -> exp GE exp .)
    LE              reduce using rule 21 (exp -> exp GE exp .)
    LT              reduce using rule 21 (exp -> exp GE exp .)
    GE              reduce using rule 21 (exp -> exp GE exp .)
    GT              reduce using rule 21 (exp -> exp GE exp .)
    ANDAND          reduce using rule 21 (exp -> exp GE exp .)
    OROR            reduce using rule 21 (exp -> exp GE exp .)
    $end            reduce using rule 21 (exp -> exp GE exp .)
    RPAREN          reduce using rule 21 (exp -> exp GE exp .)
    COMMA           reduce using rule 21 (exp -> exp GE exp .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 21
    TIMES           shift and go to state 16
    MOD             shift and go to state 22
    DIVIDE          shift and go to state 14

  ! PLUS            [ reduce using rule 21 (exp -> exp GE exp .) ]
  ! MINUS           [ reduce using rule 21 (exp -> exp GE exp .) ]
  ! TIMES           [ reduce using rule 21 (exp -> exp GE exp .) ]
  ! MOD             [ reduce using rule 21 (exp -> exp GE exp .) ]
  ! DIVIDE          [ reduce using rule 21 (exp -> exp GE exp .) ]
  ! EQUALEQUAL      [ shift and go to state 20 ]
  ! LE              [ shift and go to state 13 ]
  ! LT              [ shift and go to state 17 ]
  ! GE              [ shift and go to state 15 ]
  ! GT              [ shift and go to state 18 ]
  ! ANDAND          [ shift and go to state 11 ]
  ! OROR            [ shift and go to state 12 ]


state 33

    (15) exp -> exp TIMES exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . TIMES exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . EQUALEQUAL exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . LT exp
    (21) exp -> exp . GE exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . ANDAND exp
    (24) exp -> exp . OROR exp

    PLUS            reduce using rule 15 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 15 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 15 (exp -> exp TIMES exp .)
    MOD             reduce using rule 15 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 15 (exp -> exp TIMES exp .)
    EQUALEQUAL      reduce using rule 15 (exp -> exp TIMES exp .)
    LE              reduce using rule 15 (exp -> exp TIMES exp .)
    LT              reduce using rule 15 (exp -> exp TIMES exp .)
    GE              reduce using rule 15 (exp -> exp TIMES exp .)
    GT              reduce using rule 15 (exp -> exp TIMES exp .)
    ANDAND          reduce using rule 15 (exp -> exp TIMES exp .)
    OROR            reduce using rule 15 (exp -> exp TIMES exp .)
    $end            reduce using rule 15 (exp -> exp TIMES exp .)
    RPAREN          reduce using rule 15 (exp -> exp TIMES exp .)
    COMMA           reduce using rule 15 (exp -> exp TIMES exp .)

  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 21 ]
  ! TIMES           [ shift and go to state 16 ]
  ! MOD             [ shift and go to state 22 ]
  ! DIVIDE          [ shift and go to state 14 ]
  ! EQUALEQUAL      [ shift and go to state 20 ]
  ! LE              [ shift and go to state 13 ]
  ! LT              [ shift and go to state 17 ]
  ! GE              [ shift and go to state 15 ]
  ! GT              [ shift and go to state 18 ]
  ! ANDAND          [ shift and go to state 11 ]
  ! OROR            [ shift and go to state 12 ]


state 34

    (20) exp -> exp LT exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . TIMES exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . EQUALEQUAL exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . LT exp
    (21) exp -> exp . GE exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . ANDAND exp
    (24) exp -> exp . OROR exp

    EQUALEQUAL      reduce using rule 20 (exp -> exp LT exp .)
    LE              reduce using rule 20 (exp -> exp LT exp .)
    LT              reduce using rule 20 (exp -> exp LT exp .)
    GE              reduce using rule 20 (exp -> exp LT exp .)
    GT              reduce using rule 20 (exp -> exp LT exp .)
    ANDAND          reduce using rule 20 (exp -> exp LT exp .)
    OROR            reduce using rule 20 (exp -> exp LT exp .)
    $end            reduce using rule 20 (exp -> exp LT exp .)
    RPAREN          reduce using rule 20 (exp -> exp LT exp .)
    COMMA           reduce using rule 20 (exp -> exp LT exp .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 21
    TIMES           shift and go to state 16
    MOD             shift and go to state 22
    DIVIDE          shift and go to state 14

  ! PLUS            [ reduce using rule 20 (exp -> exp LT exp .) ]
  ! MINUS           [ reduce using rule 20 (exp -> exp LT exp .) ]
  ! TIMES           [ reduce using rule 20 (exp -> exp LT exp .) ]
  ! MOD             [ reduce using rule 20 (exp -> exp LT exp .) ]
  ! DIVIDE          [ reduce using rule 20 (exp -> exp LT exp .) ]
  ! EQUALEQUAL      [ shift and go to state 20 ]
  ! LE              [ shift and go to state 13 ]
  ! LT              [ shift and go to state 17 ]
  ! GE              [ shift and go to state 15 ]
  ! GT              [ shift and go to state 18 ]
  ! ANDAND          [ shift and go to state 11 ]
  ! OROR            [ shift and go to state 12 ]


state 35

    (22) exp -> exp GT exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . TIMES exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . EQUALEQUAL exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . LT exp
    (21) exp -> exp . GE exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . ANDAND exp
    (24) exp -> exp . OROR exp

    EQUALEQUAL      reduce using rule 22 (exp -> exp GT exp .)
    LE              reduce using rule 22 (exp -> exp GT exp .)
    LT              reduce using rule 22 (exp -> exp GT exp .)
    GE              reduce using rule 22 (exp -> exp GT exp .)
    GT              reduce using rule 22 (exp -> exp GT exp .)
    ANDAND          reduce using rule 22 (exp -> exp GT exp .)
    OROR            reduce using rule 22 (exp -> exp GT exp .)
    $end            reduce using rule 22 (exp -> exp GT exp .)
    RPAREN          reduce using rule 22 (exp -> exp GT exp .)
    COMMA           reduce using rule 22 (exp -> exp GT exp .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 21
    TIMES           shift and go to state 16
    MOD             shift and go to state 22
    DIVIDE          shift and go to state 14

  ! PLUS            [ reduce using rule 22 (exp -> exp GT exp .) ]
  ! MINUS           [ reduce using rule 22 (exp -> exp GT exp .) ]
  ! TIMES           [ reduce using rule 22 (exp -> exp GT exp .) ]
  ! MOD             [ reduce using rule 22 (exp -> exp GT exp .) ]
  ! DIVIDE          [ reduce using rule 22 (exp -> exp GT exp .) ]
  ! EQUALEQUAL      [ shift and go to state 20 ]
  ! LE              [ shift and go to state 13 ]
  ! LT              [ shift and go to state 17 ]
  ! GE              [ shift and go to state 15 ]
  ! GT              [ shift and go to state 18 ]
  ! ANDAND          [ shift and go to state 11 ]
  ! OROR            [ shift and go to state 12 ]


state 36

    (13) exp -> exp PLUS exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . TIMES exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . EQUALEQUAL exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . LT exp
    (21) exp -> exp . GE exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . ANDAND exp
    (24) exp -> exp . OROR exp

    PLUS            reduce using rule 13 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 13 (exp -> exp PLUS exp .)
    EQUALEQUAL      reduce using rule 13 (exp -> exp PLUS exp .)
    LE              reduce using rule 13 (exp -> exp PLUS exp .)
    LT              reduce using rule 13 (exp -> exp PLUS exp .)
    GE              reduce using rule 13 (exp -> exp PLUS exp .)
    GT              reduce using rule 13 (exp -> exp PLUS exp .)
    ANDAND          reduce using rule 13 (exp -> exp PLUS exp .)
    OROR            reduce using rule 13 (exp -> exp PLUS exp .)
    $end            reduce using rule 13 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 13 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 13 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 16
    MOD             shift and go to state 22
    DIVIDE          shift and go to state 14

  ! TIMES           [ reduce using rule 13 (exp -> exp PLUS exp .) ]
  ! MOD             [ reduce using rule 13 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 13 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 21 ]
  ! EQUALEQUAL      [ shift and go to state 20 ]
  ! LE              [ shift and go to state 13 ]
  ! LT              [ shift and go to state 17 ]
  ! GE              [ shift and go to state 15 ]
  ! GT              [ shift and go to state 18 ]
  ! ANDAND          [ shift and go to state 11 ]
  ! OROR            [ shift and go to state 12 ]


state 37

    (18) exp -> exp EQUALEQUAL exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . TIMES exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . EQUALEQUAL exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . LT exp
    (21) exp -> exp . GE exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . ANDAND exp
    (24) exp -> exp . OROR exp

    EQUALEQUAL      reduce using rule 18 (exp -> exp EQUALEQUAL exp .)
    ANDAND          reduce using rule 18 (exp -> exp EQUALEQUAL exp .)
    OROR            reduce using rule 18 (exp -> exp EQUALEQUAL exp .)
    $end            reduce using rule 18 (exp -> exp EQUALEQUAL exp .)
    RPAREN          reduce using rule 18 (exp -> exp EQUALEQUAL exp .)
    COMMA           reduce using rule 18 (exp -> exp EQUALEQUAL exp .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 21
    TIMES           shift and go to state 16
    MOD             shift and go to state 22
    DIVIDE          shift and go to state 14
    LE              shift and go to state 13
    LT              shift and go to state 17
    GE              shift and go to state 15
    GT              shift and go to state 18

  ! PLUS            [ reduce using rule 18 (exp -> exp EQUALEQUAL exp .) ]
  ! MINUS           [ reduce using rule 18 (exp -> exp EQUALEQUAL exp .) ]
  ! TIMES           [ reduce using rule 18 (exp -> exp EQUALEQUAL exp .) ]
  ! MOD             [ reduce using rule 18 (exp -> exp EQUALEQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 18 (exp -> exp EQUALEQUAL exp .) ]
  ! LE              [ reduce using rule 18 (exp -> exp EQUALEQUAL exp .) ]
  ! LT              [ reduce using rule 18 (exp -> exp EQUALEQUAL exp .) ]
  ! GE              [ reduce using rule 18 (exp -> exp EQUALEQUAL exp .) ]
  ! GT              [ reduce using rule 18 (exp -> exp EQUALEQUAL exp .) ]
  ! EQUALEQUAL      [ shift and go to state 20 ]
  ! ANDAND          [ shift and go to state 11 ]
  ! OROR            [ shift and go to state 12 ]


state 38

    (14) exp -> exp MINUS exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . TIMES exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . EQUALEQUAL exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . LT exp
    (21) exp -> exp . GE exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . ANDAND exp
    (24) exp -> exp . OROR exp

    PLUS            reduce using rule 14 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 14 (exp -> exp MINUS exp .)
    EQUALEQUAL      reduce using rule 14 (exp -> exp MINUS exp .)
    LE              reduce using rule 14 (exp -> exp MINUS exp .)
    LT              reduce using rule 14 (exp -> exp MINUS exp .)
    GE              reduce using rule 14 (exp -> exp MINUS exp .)
    GT              reduce using rule 14 (exp -> exp MINUS exp .)
    ANDAND          reduce using rule 14 (exp -> exp MINUS exp .)
    OROR            reduce using rule 14 (exp -> exp MINUS exp .)
    $end            reduce using rule 14 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 14 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 14 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 16
    MOD             shift and go to state 22
    DIVIDE          shift and go to state 14

  ! TIMES           [ reduce using rule 14 (exp -> exp MINUS exp .) ]
  ! MOD             [ reduce using rule 14 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 14 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 21 ]
  ! EQUALEQUAL      [ shift and go to state 20 ]
  ! LE              [ shift and go to state 13 ]
  ! LT              [ shift and go to state 17 ]
  ! GE              [ shift and go to state 15 ]
  ! GT              [ shift and go to state 18 ]
  ! ANDAND          [ shift and go to state 11 ]
  ! OROR            [ shift and go to state 12 ]


state 39

    (16) exp -> exp MOD exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . TIMES exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . EQUALEQUAL exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . LT exp
    (21) exp -> exp . GE exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . ANDAND exp
    (24) exp -> exp . OROR exp

    PLUS            reduce using rule 16 (exp -> exp MOD exp .)
    MINUS           reduce using rule 16 (exp -> exp MOD exp .)
    TIMES           reduce using rule 16 (exp -> exp MOD exp .)
    MOD             reduce using rule 16 (exp -> exp MOD exp .)
    DIVIDE          reduce using rule 16 (exp -> exp MOD exp .)
    EQUALEQUAL      reduce using rule 16 (exp -> exp MOD exp .)
    LE              reduce using rule 16 (exp -> exp MOD exp .)
    LT              reduce using rule 16 (exp -> exp MOD exp .)
    GE              reduce using rule 16 (exp -> exp MOD exp .)
    GT              reduce using rule 16 (exp -> exp MOD exp .)
    ANDAND          reduce using rule 16 (exp -> exp MOD exp .)
    OROR            reduce using rule 16 (exp -> exp MOD exp .)
    $end            reduce using rule 16 (exp -> exp MOD exp .)
    RPAREN          reduce using rule 16 (exp -> exp MOD exp .)
    COMMA           reduce using rule 16 (exp -> exp MOD exp .)

  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 21 ]
  ! TIMES           [ shift and go to state 16 ]
  ! MOD             [ shift and go to state 22 ]
  ! DIVIDE          [ shift and go to state 14 ]
  ! EQUALEQUAL      [ shift and go to state 20 ]
  ! LE              [ shift and go to state 13 ]
  ! LT              [ shift and go to state 17 ]
  ! GE              [ shift and go to state 15 ]
  ! GT              [ shift and go to state 18 ]
  ! ANDAND          [ shift and go to state 11 ]
  ! OROR            [ shift and go to state 12 ]


state 40

    (10) exp -> IDENTIFIER LPAREN optargs RPAREN .

    PLUS            reduce using rule 10 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    MINUS           reduce using rule 10 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    TIMES           reduce using rule 10 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    MOD             reduce using rule 10 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    DIVIDE          reduce using rule 10 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    EQUALEQUAL      reduce using rule 10 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LE              reduce using rule 10 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LT              reduce using rule 10 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    GE              reduce using rule 10 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    GT              reduce using rule 10 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    ANDAND          reduce using rule 10 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    OROR            reduce using rule 10 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    $end            reduce using rule 10 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    RPAREN          reduce using rule 10 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    COMMA           reduce using rule 10 (exp -> IDENTIFIER LPAREN optargs RPAREN .)


state 41

    (8) args -> exp COMMA . args
    (8) args -> . exp COMMA args
    (9) args -> . exp
    (1) exp -> . IDENTIFIER
    (2) exp -> . NUMBER
    (3) exp -> . STRING
    (4) exp -> . TRUE
    (5) exp -> . FALSE
    (6) exp -> . NOT exp
    (7) exp -> . LPAREN exp RPAREN
    (10) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp TIMES exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp EQUALEQUAL exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp LT exp
    (21) exp -> . exp GE exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp ANDAND exp
    (24) exp -> . exp OROR exp

    IDENTIFIER      shift and go to state 4
    NUMBER          shift and go to state 1
    STRING          shift and go to state 3
    TRUE            shift and go to state 2
    FALSE           shift and go to state 6
    NOT             shift and go to state 8
    LPAREN          shift and go to state 5

    args                           shift and go to state 42
    exp                            shift and go to state 26

state 42

    (8) args -> exp COMMA args .

    RPAREN          reduce using rule 8 (args -> exp COMMA args .)

